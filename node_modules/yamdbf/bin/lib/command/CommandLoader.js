'use babel';
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _CommandRegistry = require('./CommandRegistry');

var _CommandRegistry2 = _interopRequireDefault(_CommandRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Function.prototype.$asyncbind = function anonymous(self, catcher) {
	var resolver = this;

	if (catcher === true) {
		if (!Function.prototype.$asyncbind.EagerThenable) Function.prototype.$asyncbind.EagerThenable = function factory(tick) {
			var _tasks = [];

			if (!tick) {
				try {
					tick = process.nextTick;
				} catch (ex) {
					tick = function tick(p) {
						setTimeout(p, 0);
					};
				}
			}

			function _untask() {
				for (var i = 0; i < _tasks.length; i += 2) {
					var t = _tasks[i + 1],
					    r = _tasks[i];

					for (var j = 0; j < t.length; j++) t[j].call(null, r);
				}

				_tasks = [];
			}

			function isThenable(obj) {
				return obj && obj instanceof Object && typeof obj.then === 'function';
			}

			function EagerThenable(resolver) {
				function done(inline) {
					var w;
					if (_sync || phase < 0 || (w = _thens[phase]).length === 0) return;

					_tasks.push(result, w);

					_thens = [[], []];
					if (_tasks.length === 2) inline ? _untask() : tick(_untask);
				}

				function resolveThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 0;
					result = x;
					done(true);
				}

				function rejectThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 1;
					result = x;
					done(true);
				}

				function settler(resolver, rejecter) {
					_thens[0].push(resolver);

					_thens[1].push(rejecter);

					done();
				}

				function toString() {
					return 'EagerThenable{' + {
						'-1': 'pending',
						0: 'resolved',
						1: 'rejected'
					}[phase] + '}=' + result.toString();
				}

				function guard() {
					try {
						resolver.call(null, resolveThen, rejectThen);
					} catch (ex) {
						rejectThen(ex);
					}
				}

				this.then = settler;
				this.toString = toString;
				var _thens = [[], []],
				    _sync = true,
				    phase = -1,
				    result;
				guard();
				_sync = false;
				done();
			}

			EagerThenable.resolve = function (v) {
				return isThenable(v) ? v : {
					then: function then(resolve, reject) {
						return resolve(v);
					}
				};
			};

			return EagerThenable;
		}();
		return new Function.prototype.$asyncbind.EagerThenable(boundThen);
	}

	if (catcher) {
		if (Function.prototype.$asyncbind.wrapAsyncStack) catcher = Function.prototype.$asyncbind.wrapAsyncStack(catcher);
		return then;
	}

	function then(result, error) {
		try {
			return result && result instanceof Object && typeof result.then === 'function' ? result.then(then, catcher) : resolver.call(self, result, error || catcher);
		} catch (ex) {
			return (error || catcher)(ex);
		}
	}

	function boundThen(result, error) {
		return resolver.call(self, result, error);
	}

	boundThen.then = boundThen;
	return boundThen;
};

/**
 * Handles loading all commands from the given Bot's commandsDir
 * @class CommandLoader
 * @param {Bot} bot - Bot instance
 */
class CommandLoader {
	constructor(bot) {
		/** @type {Bot} */
		this._bot = bot;
	}

	/**
  * Load or reload all commands from the base commands directory and the
  * user-specified {@link Bot#commandsDir} directory and stores them in
  * the Bot's {@link CommandRegistry} instance ({@link Bot#commands})
  * @memberof CommandLoader
  * @instance
  */
	loadCommands() {
		if (this._bot.commands.size > 0) this._bot.commands = new _CommandRegistry2.default();
		let commandFiles = [];
		commandFiles.push(..._glob2.default.sync(`${ _path2.default.join(__dirname, './base') }/**/*.js`));
		commandFiles.push(..._glob2.default.sync(`${ this._bot.commandsDir }/**/*.js`));
		let loadedCommands = 0;
		commandFiles.forEach(fileName => {
			const commandLocation = fileName.replace('.js', '');
			delete require.cache[require.resolve(commandLocation)];
			const Command = require(commandLocation).default;
			const _command = new Command(this._bot);
			if (this._bot.disableBase.includes(_command.name)) return;
			_command._classloc = commandLocation;
			if (_command.overloads) {
				if (!this._bot.commands.has(_command.overloads)) // eslint-disable-line curly
					throw new Error(`Command "${ _command.overloads }" does not exist to be overloaded.`);
				this._bot.commands.delete(_command.overloads);
				this._bot.commands.register(_command, _command.name);
				console.log(`Command '${ _command.name }' loaded, overloading command '${ _command.overloads }'.`); // eslint-disable-line no-console
			} else {
				this._bot.commands.register(_command, _command.name);
				loadedCommands++;
				console.log(`Command '${ _command.name }' loaded.`); // eslint-disable-line no-console
			}
		});
		console.log(`Loaded ${ loadedCommands } total commands in ${ this._bot.commands.groups.length } groups.`); // eslint-disable-line no-console
	}

	/**
  * Reload the given command in the Bot's {@link CommandRegistry} ({@link Bot#commands})
  * @memberof CommandLoader
  * @instance
  * @param {string} nameOrAlias - {@link Command#name} or {@link Command#aliases} alias
  * @returns {boolean}
  */
	reloadCommand(nameOrAlias) {
		const name = this._bot.commands.findByNameOrAlias(nameOrAlias).name;
		if (!name) return false;
		const commandLocation = this._bot.commands.get(name)._classloc;
		delete require.cache[require.resolve(commandLocation)];
		const Command = require(commandLocation).default;
		const _command = new Command(this._bot);
		_command._classloc = commandLocation;
		this._bot.commands.register(_command, _command.name, true);
		console.log(`Command '${ _command.name }' reloaded.`); // eslint-disable-line no-console
		return true;
	}
}
exports.default = CommandLoader;