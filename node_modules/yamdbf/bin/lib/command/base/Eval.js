'use babel';
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Command = require('../Command');

var _Command2 = _interopRequireDefault(_Command);

var _util = require('util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Function.prototype.$asyncbind = function anonymous(self, catcher) {
	var resolver = this;

	if (catcher === true) {
		if (!Function.prototype.$asyncbind.EagerThenable) Function.prototype.$asyncbind.EagerThenable = function factory(tick) {
			var _tasks = [];

			if (!tick) {
				try {
					tick = process.nextTick;
				} catch (ex) {
					tick = function tick(p) {
						setTimeout(p, 0);
					};
				}
			}

			function _untask() {
				for (var i = 0; i < _tasks.length; i += 2) {
					var t = _tasks[i + 1],
					    r = _tasks[i];

					for (var j = 0; j < t.length; j++) t[j].call(null, r);
				}

				_tasks = [];
			}

			function isThenable(obj) {
				return obj && obj instanceof Object && typeof obj.then === 'function';
			}

			function EagerThenable(resolver) {
				function done(inline) {
					var w;
					if (_sync || phase < 0 || (w = _thens[phase]).length === 0) return;

					_tasks.push(result, w);

					_thens = [[], []];
					if (_tasks.length === 2) inline ? _untask() : tick(_untask);
				}

				function resolveThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 0;
					result = x;
					done(true);
				}

				function rejectThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 1;
					result = x;
					done(true);
				}

				function settler(resolver, rejecter) {
					_thens[0].push(resolver);

					_thens[1].push(rejecter);

					done();
				}

				function toString() {
					return 'EagerThenable{' + {
						'-1': 'pending',
						0: 'resolved',
						1: 'rejected'
					}[phase] + '}=' + result.toString();
				}

				function guard() {
					try {
						resolver.call(null, resolveThen, rejectThen);
					} catch (ex) {
						rejectThen(ex);
					}
				}

				this.then = settler;
				this.toString = toString;
				var _thens = [[], []],
				    _sync = true,
				    phase = -1,
				    result;
				guard();
				_sync = false;
				done();
			}

			EagerThenable.resolve = function (v) {
				return isThenable(v) ? v : {
					then: function then(resolve, reject) {
						return resolve(v);
					}
				};
			};

			return EagerThenable;
		}();
		return new Function.prototype.$asyncbind.EagerThenable(boundThen);
	}

	if (catcher) {
		if (Function.prototype.$asyncbind.wrapAsyncStack) catcher = Function.prototype.$asyncbind.wrapAsyncStack(catcher);
		return then;
	}

	function then(result, error) {
		try {
			return result && result instanceof Object && typeof result.then === 'function' ? result.then(then, catcher) : resolver.call(self, result, error || catcher);
		} catch (ex) {
			return (error || catcher)(ex);
		}
	}

	function boundThen(result, error) {
		return resolver.call(self, result, error);
	}

	boundThen.then = boundThen;
	return boundThen;
};

class Eval extends _Command2.default {
	constructor(bot) {
		super(bot, {
			name: 'eval',
			aliases: [],
			description: 'Evaluate provided Javascript code',
			usage: '<prefix>eval [code]',
			extraHelp: '',
			group: 'base',
			argOpts: { stringArgs: true },
			ownerOnly: true
		});
	}

	action(message, args, mentions, original) {
		return new Promise(function ($return, $error) {
			var code;
			code = original.replace(`${ this.bot.getPrefix(message.guild) || '' }${ this.name } `, '');

			if (!code) return $return(this._respond(message, '**ERROR:** ```xl\nNo code provided to evaluate.\n```'));

			function $Try_1_Post() {
				return $return();
			}

			var $Try_1_Catch = function (err) {
				return $return(this._respond(message, `**INPUT:**\n\`\`\`js\n${ code }\n\`\`\`\n**ERROR:**\n\`\`\`xl\n${ this._clean(err) }\n\`\`\``));
			}.$asyncbind(this, $error);

			try {
				let evaled;

				evaled = eval(code);

				function $IfStatement_2() {
					if (typeof evaled !== 'string') evaled = (0, _util.inspect)(evaled, { depth: 0 });
					return $return(this._respond(message, `**INPUT:**\n\`\`\`js\n${ code }\n\`\`\`\n**OUTPUT:**\n\`\`\`xl\n${ this._clean(evaled) }\n\`\`\``));
				}

				if (evaled instanceof Promise) {
					return evaled.then(function ($await_3) {
						evaled = $await_3;return $IfStatement_2.call(this);
					}.$asyncbind(this, $Try_1_Catch), $Try_1_Catch);
				}return $IfStatement_2.call(this);
			} catch (err) {
				$Try_1_Catch(err)
			}
		}.$asyncbind(this));
	}

	_clean(text) {
		return typeof text === 'string' ? text.replace(/`/g, `\`${ String.fromCharCode(8203) }`).replace(/@/g, `@${ String.fromCharCode(8203) }`).replace(/[\w\d]{24}\.[\w\d]{6}\.[\w\d-_]{27}/g, '[REDACTED]').replace(/email: '[^']+'/g, `email: '[REDACTED]'`) : text;
	}
}
exports.default = Eval;