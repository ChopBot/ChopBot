'use babel';
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Util = require('../../../Util');

var _Command = require('../../Command');

var _Command2 = _interopRequireDefault(_Command);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Function.prototype.$asyncbind = function anonymous(self, catcher) {
	var resolver = this;

	if (catcher === true) {
		if (!Function.prototype.$asyncbind.EagerThenable) Function.prototype.$asyncbind.EagerThenable = function factory(tick) {
			var _tasks = [];

			if (!tick) {
				try {
					tick = process.nextTick;
				} catch (ex) {
					tick = function tick(p) {
						setTimeout(p, 0);
					};
				}
			}

			function _untask() {
				for (var i = 0; i < _tasks.length; i += 2) {
					var t = _tasks[i + 1],
					    r = _tasks[i];

					for (var j = 0; j < t.length; j++) t[j].call(null, r);
				}

				_tasks = [];
			}

			function isThenable(obj) {
				return obj && obj instanceof Object && typeof obj.then === 'function';
			}

			function EagerThenable(resolver) {
				function done(inline) {
					var w;
					if (_sync || phase < 0 || (w = _thens[phase]).length === 0) return;

					_tasks.push(result, w);

					_thens = [[], []];
					if (_tasks.length === 2) inline ? _untask() : tick(_untask);
				}

				function resolveThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 0;
					result = x;
					done(true);
				}

				function rejectThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 1;
					result = x;
					done(true);
				}

				function settler(resolver, rejecter) {
					_thens[0].push(resolver);

					_thens[1].push(rejecter);

					done();
				}

				function toString() {
					return 'EagerThenable{' + {
						'-1': 'pending',
						0: 'resolved',
						1: 'rejected'
					}[phase] + '}=' + result.toString();
				}

				function guard() {
					try {
						resolver.call(null, resolveThen, rejectThen);
					} catch (ex) {
						rejectThen(ex);
					}
				}

				this.then = settler;
				this.toString = toString;
				var _thens = [[], []],
				    _sync = true,
				    phase = -1,
				    result;
				guard();
				_sync = false;
				done();
			}

			EagerThenable.resolve = function (v) {
				return isThenable(v) ? v : {
					then: function then(resolve, reject) {
						return resolve(v);
					}
				};
			};

			return EagerThenable;
		}();
		return new Function.prototype.$asyncbind.EagerThenable(boundThen);
	}

	if (catcher) {
		if (Function.prototype.$asyncbind.wrapAsyncStack) catcher = Function.prototype.$asyncbind.wrapAsyncStack(catcher);
		return then;
	}

	function then(result, error) {
		try {
			return result && result instanceof Object && typeof result.then === 'function' ? result.then(then, catcher) : resolver.call(self, result, error || catcher);
		} catch (ex) {
			return (error || catcher)(ex);
		}
	}

	function boundThen(result, error) {
		return resolver.call(self, result, error);
	}

	boundThen.then = boundThen;
	return boundThen;
};

class Limit extends _Command2.default {
	constructor(bot) {
		super(bot, {
			name: 'limit',
			description: 'Limit a command to the provided roles',
			usage: '<prefix>limit <command>, <role names, ...>',
			extraHelp: 'The comma after the command name -- before the role names list -- is necessary.',
			group: 'base',
			argOpts: { separator: ',' },
			permissions: ['ADMINISTRATOR']
		});
	}

	action(message, args, mentions) {
		return new Promise(function ($return, $error) {
			let commandName = args.shift();
			const command = this.bot.commands.find(c => (0, _Util.normalize)(commandName) === (0, _Util.normalize)(c.name));
			if (!command) return $return(this._respond(message, `Failed to find a command with the name \`${ commandName }\``));
			if (command.group === 'base') this._respond(message, `Cannot limit base commands.`);

			const storage = message.guild.storage;
			let limitedCommands = storage.getSetting('limitedCommands') || {};
			let newLimit = limitedCommands[command.name] || [];

			let roles = [];
			let invalidRoles = [];
			for (const name of args) {
				let foundRole = message.guild.roles.find(role => (0, _Util.normalize)(role.name) === (0, _Util.normalize)(name));
				if (!foundRole) invalidRoles.push(name);else if (foundRole && newLimit.includes(foundRole.id)) message.channel.send(`Role \`${ foundRole.name }\` is already a limiter for command: \`${ command.name }\``);else roles.push(foundRole);
			}

			if (invalidRoles.length > 0) message.channel.send(`Couldn't find role${ invalidRoles.length > 1 ? 's' : '' }: \`${ invalidRoles.join('`, `') }\``);
			if (roles.length === 0) return $return(this._respond(message, `Failed to add any roles to the command.`));

			newLimit = newLimit.concat(roles.map(role => role.id));
			limitedCommands[command.name] = newLimit;
			storage.setSetting('limitedCommands', limitedCommands);

			return $return(this._respond(message, `Successfully added role${ roles.length > 1 ? 's' : '' }: \`${ roles.map(role => role.name).join('`, `') }\` to the limiter for command: \`${ command.name }\``));
		}.$asyncbind(this));
	}
}
exports.default = Limit;