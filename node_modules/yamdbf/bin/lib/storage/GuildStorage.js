'use babel';
'use strict';

/**
 * Handle loading, saving, and storing Guild data and settings
 * via persistent storage. Created automatically per-guild
 * by {@link GuildStorageLoader}
 * @class GuildStorage
 * @param {Bot} bot - Bot instance
 * @param {(external:Guild|string)} guild - Discord.js Guild object or guild ID string
 * @param {LocalStorage} dataStorage - LocalStorage instance containing all guild-specific data
 * @param {LocalStorage} settingsStorage - LocalStorage instance containing all guild-specific settings
 */

Object.defineProperty(exports, "__esModule", {
	value: true
});

Function.prototype.$asyncbind = function anonymous(self, catcher) {
	var resolver = this;

	if (catcher === true) {
		if (!Function.prototype.$asyncbind.EagerThenable) Function.prototype.$asyncbind.EagerThenable = function factory(tick) {
			var _tasks = [];

			if (!tick) {
				try {
					tick = process.nextTick;
				} catch (ex) {
					tick = function tick(p) {
						setTimeout(p, 0);
					};
				}
			}

			function _untask() {
				for (var i = 0; i < _tasks.length; i += 2) {
					var t = _tasks[i + 1],
					    r = _tasks[i];

					for (var j = 0; j < t.length; j++) t[j].call(null, r);
				}

				_tasks = [];
			}

			function isThenable(obj) {
				return obj && obj instanceof Object && typeof obj.then === 'function';
			}

			function EagerThenable(resolver) {
				function done(inline) {
					var w;
					if (_sync || phase < 0 || (w = _thens[phase]).length === 0) return;

					_tasks.push(result, w);

					_thens = [[], []];
					if (_tasks.length === 2) inline ? _untask() : tick(_untask);
				}

				function resolveThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 0;
					result = x;
					done(true);
				}

				function rejectThen(x) {
					if (phase >= 0) return;
					if (isThenable(x)) return x.then(resolveThen, rejectThen);
					phase = 1;
					result = x;
					done(true);
				}

				function settler(resolver, rejecter) {
					_thens[0].push(resolver);

					_thens[1].push(rejecter);

					done();
				}

				function toString() {
					return 'EagerThenable{' + {
						'-1': 'pending',
						0: 'resolved',
						1: 'rejected'
					}[phase] + '}=' + result.toString();
				}

				function guard() {
					try {
						resolver.call(null, resolveThen, rejectThen);
					} catch (ex) {
						rejectThen(ex);
					}
				}

				this.then = settler;
				this.toString = toString;
				var _thens = [[], []],
				    _sync = true,
				    phase = -1,
				    result;
				guard();
				_sync = false;
				done();
			}

			EagerThenable.resolve = function (v) {
				return isThenable(v) ? v : {
					then: function then(resolve, reject) {
						return resolve(v);
					}
				};
			};

			return EagerThenable;
		}();
		return new Function.prototype.$asyncbind.EagerThenable(boundThen);
	}

	if (catcher) {
		if (Function.prototype.$asyncbind.wrapAsyncStack) catcher = Function.prototype.$asyncbind.wrapAsyncStack(catcher);
		return then;
	}

	function then(result, error) {
		try {
			return result && result instanceof Object && typeof result.then === 'function' ? result.then(then, catcher) : resolver.call(self, result, error || catcher);
		} catch (ex) {
			return (error || catcher)(ex);
		}
	}

	function boundThen(result, error) {
		return resolver.call(self, result, error);
	}

	boundThen.then = boundThen;
	return boundThen;
};

class GuildStorage {
	constructor(bot, guild, dataStorage, settingsStorage) {
		/** @type {string} */
		this._id = guild.id || guild;

		/** @type {LocalStorage} */
		this._dataStorage = dataStorage;

		/** @type {LocalStorage} */
		this._settingsStorage = settingsStorage;

		/** @type {Object} */
		this._temp = {};

		// Create blank storage for the guild if no storage is present
		if (!this._dataStorage.getItem(this.id)) this._dataStorage.setItem(this.id, {});

		// Set default settings if no settings are present
		if (!this._settingsStorage.getItem(this.id)) {
			this._settingsStorage.setItem(this.id, {});
			let defaults = bot.storage.getItem('defaultGuildSettings');
			Object.keys(defaults).forEach(key => {
				this._settingsStorage.setItem(`${ this.id }/${ key }`, defaults[key]);
			});
		}
	}

	/**
  * Discord.js Guild ID string
  * @memberof GuildStorage
  * @instance
  * @type {string}
  * @name id
  */
	get id() {
		return this._id;
	}

	// Settings storage ////////////////////////////////////////////////////////

	/**
  * The number of keys in this Guild's settings
  * @memberof GuildStorage
  * @instance
  * @type {number}
  */
	get settingsLength() {
		return Object.keys(this._settingsStorage.getItem(this.id)).length || 0;
	}

	/**
  * The names of all keys in this guild's settings
  * @memberof GuildStorage
  * @instance
  * @type {string[]}
  */
	get settingsKeys() {
		return Object.keys(this._settingsStorage.getItem(this.id));
	}

	/**
  * Get the name of the key at the given index in this guild's settings
  * @memberof GuildStorage
  * @instance
  * @param {number} index - The index of the key to find
  * @returns {string}
  */
	settingKey(index) {
		if (!index || index < 0) return null;
		let settings = this._settingsStorage.getItem(this.id);
		if (index >= settings.length) return null;
		return Object.keys(settings)[index];
	}

	/**
  * Get the value of the given key in this guild's settings
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the setting to get
  * @returns {*}
  */
	getSetting(key) {
		if (typeof key !== 'string') return null;
		return this._settingsStorage.getItem(`${ this.id }/${ key }`);
	}

	/**
  * Set the value of a setting in this guild's settings
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the setting to set
  * @param {*} value - The value to set
  */
	setSetting(key, value) {
		if (typeof key !== 'string') return;
		if (typeof value === 'undefined') value = '';
		this._settingsStorage.setItem(`${ this.id }/${ key }`, value);
	}

	/**
  * Delete a setting in this guild's settings
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the setting to delete
  */
	removeSetting(key) {
		if (typeof key !== 'string') return;
		this._settingsStorage.removeItem(`${ this.id }/${ key }`);
	}

	/**
  * Check if a setting exists
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the setting to check for
  * @returns {boolean}
  */
	settingExists(key) {
		if (typeof key !== 'string') return false;
		return this.getSetting(key) !== null;
	}

	/**
  * Reset the settings for this guild to default, deleting any
  * extra settings that are not part of the provided defaults
  * @example
  * <GuildStorage>.resetSettings(<Bot>.storage.getItem('defaultGuildSettings'));
  * @memberof GuildStorage
  * @instance
  * @param {Object} defaults - Should always use {@link defaultGuildSettings}
  */
	resetSettings(defaults) {
		this._settingsStorage.setItem(this.id, defaults);
	}

	// Non-settings storage ////////////////////////////////////////////////////

	/**
  * The number of keys in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @type {number}
  */
	get length() {
		return Object.keys(this._dataStorage.getItem(this.id)).length || 0;
	}

	/**
  * The names of all keys in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @type {string[]}
  */
	get keys() {
		return Object.keys(this._dataStorage.getItem(this.id));
	}

	/**
  * Get the name of the key at the given index in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @param {number} index - The index of the key to find
  * @returns {string}
  */
	key(index) {
		if (!index || index < 0) return null;
		let data = this._dataStorage.getItem(this.id);
		if (index >= data.length) return null;
		return Object.keys(data)[index];
	}

	/**
  * Get the value of the given key in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the item to get
  * @returns {*}
  */
	getItem(key) {
		if (typeof key !== 'string') return null;
		return this._dataStorage.getItem(`${ this.id }/${ key }`);
	}

	/**
  * Set the value of a given key in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the item to set
  * @param {*} value - The value to set
  */
	setItem(key, value) {
		if (typeof key !== 'string') return;
		if (typeof value === 'undefined') value = '';
		this._dataStorage.setItem(`${ this.id }/${ key }`, value);
	}

	/**
  * Delete an item in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the item to delete
  */
	removeItem(key) {
		if (typeof key !== 'string') return;
		this._dataStorage.removeItem(`${ this.id }/${ key }`);
	}

	/**
  * Check if key/value pair exists in this guild's storage
  * @memberof GuildStorage
  * @instance
  * @param {string} key - The key of the item to check for
  * @returns {boolean}
  */
	exists(key) {
		if (typeof key !== 'string') return false;
		return !!this.getItem(key);
	}

	/**
  * Delete all data from this guild's storage
  * @memberof GuildStorage
  * @instance
  */
	clear() {
		this._dataStorage.setItem(this.id, {});
	}

	/**
  * Allow access to a storage/settings item only when it is not currently being
  * accessed. Waits for other nonConcurrentAccess operations to finish
  * before proceeding with callback
  * @memberof GuildStorage
  * @instance
  * @param {string} key - the storage key you will be accessing
  * @param {function} callback - callback to execute that will be accessing the key
  * @returns {Promise}
  */
	queue(key, callback) {
		return new Promise((resolve, reject) => {
			try {
				while (this._temp[`checking${ key }`]) {} // eslint-disable-line
				this._temp[`checking${ key }`] = true;
				const finished = callback(key); // eslint-disable-line
				if (finished instanceof Promise) {
					finished.then(() => {
						delete this._temp[`checking${ key }`];
						resolve();
					}).catch(err => {
						delete this._temp[`checking${ key }`];
						reject(err);
					});
				} else {
					delete this._temp[`checking${ key }`];
					resolve();
				}
			} catch (err) {
				delete this._temp[`checking${ key }`];
				reject(err);
			}
		});
	}

	nonConcurrentAccess(key, callback) {
		console.warn('GuildStorage#nonConcurrentAccess has been deprecated and will be removed in a future update. Use GuildStorage#queue instead.');
		return this.queue(key, callback);
	}
}
exports.default = GuildStorage;